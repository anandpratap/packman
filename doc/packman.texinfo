\input texinfo
@setfilename packman.texinfo
@settitle PACKMAN Manual version 1.0.0-a8

@copying
This manual is for PACKMAN, version 1.0.0-a8.

Copyright @copyright{} 2014 Li Dong.
@end copying

@titlepage
@title PACKMAN
@subtitle Package Manager Open Platform version 1.0.0-a8
@author Li Dong

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@chapter Introduction

Every human, who are using computer, will need some software to do specific tasks. Installing them is the first step and may be the hard one. In the Linux world, there are several package managers born for this purpose, such as @code{RPM} in Red Hat Linux and @code{DPKG} in Debian Linux. They both solve the dependencies among software packages and distribute precompiled packages. The drawback of this distribution style is that users can not specify the compiler and options easily if not impossible. In some cases, this may force users to build the packages (e.g. @code{HDF5} and @code{NetCDF}) manually, and this will waste users too much time when things go wrong, needless to say the complicated dependencies among packages.

@code{PACKMAN} can manage multiple compiler sets so that users can install packages built by different compiler set. A compiler set contains the compiler commands for different languages (C, C++, Fortran). This should be extremely convenient for software development, which needs to test the products compiled by different compilers.

@code{PACKMAN} also supports the programs developed by the scientific research groups, such as @code{Hyrax} OPeNDAP data server, which are not supported by the exist package managers. @code{PACKMAN} even provides the convenient operations (i.e. @code{start}, @code{stop} and @code{status}) on that data server, so even the most innocent user can construct a server with just a few commands. In addition, the weather and climate models (@code{WRF} and @code{RegCM}) are also supported. Users can just type one command line, then @code{PACKMAN} will download the necessary packages, install all the dependent libraries, and compile the models. This will save substantial precious time of scientists, and make the running model less painful.

Another killer feature of @code{PACKMAN} is the FTP mirror service. In some occasions, the computer is in a LAN, and cannot connect internet. Generally, user needs to manually download all the packages, upload them onto that computer, and install them one by one. This is really a frustrating job! @code{PACKMAN} solves this problem by providing a FTP mirror service. User can find a computer in the same LAN that can connect internet, install @code{PACKMAN} on it, and let @code{PACKMAN} setup a FTP mirror server, which can provide the downloading service for all the supported packages. After that, tell @code{PACKMAN} to access this FTP mirror server on other target computers.

In summary, @code{PACKMAN} gathers the installation experiences of different packages from experts, and avoids the same mistake to be made twice. It will save its users plenty of time, and make the package installation an enjoyment. It will also become the de facto standard.

@chapter Design of PACKMAN

The major objects of @code{PACKMAN} are:
@enumerate
@item Operate without root privilege;
@item Download packages even without internet connection through FTP mirror service;
@item Support as many Linux-like platform as possible;
@end enumerate

@code{PACKMAN} is written in Ruby, and is object-oriented and modular. It can be divided into two parts: @code{framework} and @code{packages}. @code{framework} just as its name implies contains the basic bricks of @code{PACKMAN}, such as the @code{PACKMAN::Package} class. It determines the extensibility of @code{PACKMAN}, so it must be well designed. Advanced developers with proficiency in Ruby can dive into the @code{framework}, and add more features. On the other hand, @code{packages} contains many package installation rule files, such as @file{netcdf.rb}. The richness of packages magnetize users. Anyone who is familiar with package installation can write one package file following the template and examples. Because @code{PACKMAN} provides a convenient framework, many

@chapter Usage of PACKMAN
@section Installation

There are two ways to install @code{PACKMAN}:
@enumerate
@item Use @code{GIT} to get @code{PACKMAN};
@item Directly download compressed package.
@end enumerate
The first one is recommended, because you can always access the newest update. The command to be invoked is:
@example
$ git clone https://github.com/dongli/packman
@end example
Contrastly, the compressed package will only be released aperiodically. You can find the latest one on @url{https://github.com/dongli/packman/releases}.

@section Usage for normal users

The control options for packages are coming from two sources:
@enumerate
@item Configuration file;
@item Command line options.
@end enumerate

@subsection Configure file
The configure file (e.g., @file{packman.config} in @env{PACKMAN_ROOT}) contains control parameters for @code{PACKMAN}, and records the installed packages. You can maintain one configure file, and copy it to other computer for easy duplicating of package environment.
@cartouche
@example
package_root = "/opt/packman/packages"
install_root = "/opt/packman"
use_ftp_mirror = "ftp://<IP>:<PORT>"
download_command = "curl"
defaults = @{
  "compiler_set_index" => 0,
  "mpi" => "mpich"
@}
compiler_set_0 = @{
  "c" => "gcc",
  "c++" => "g++",
  "fortran" => "ifort"
@}
@end example
@end cartouche

@subsection Command line options

@example
$ packman install netcdf -use_mpi=mpich
@end example

@example
$ packman install wrf +use_mpi=mpich -build_type=dmpar
@end example

@section Usage for developers
@code{PACKMAN} is open source, and should be perfected by the community. Everyone who is familiar with the package installation or Ruby programming language can contribute.

The first step for contributing to @code{PACKMAN} is to provide new package installation rule file. Developers don't need to master Ruby to write one by referring existing packages. The template of that file is as following:
@cartouche
@example
class <package_name> < PACKMAN::Package
  url `<package_url>'
  sha1 `<package_sha1>'
  version `<version>'

  label '<label>'
  ...

  option '<option_name>' => <default_value>/<value_type>
  ...

  depends_on `<dependent_package>'
  ...

  patch do
    url `<patch_url>'
    sha1 `<patch_sha1>'
  end
  ...

  binary <OS_distribution> => <OS_version> do
    url `<binary_url>'
    sha1 `<binary_sha1>'
  end
  ...

  def install
    ...
  end

  def postfix
    ...
  end
end
@end example
@end cartouche
A Ruby class has been defined in the above (note @code{<package_name>} should be capitalized), which is derived from @code{PACKMAN::Package} class. Developers need to provide several information about the package:
@table @code
@itemx @code{url}
The URL of the package file.
@itemx @code{sha1}
The SHA1 of the package file, used to identify the file and check if file is OK.
@itemx @code{version}
The current version of the package.
@itemx @code{label}
Label the package, such as `compiler_insensitive', `master_package'.
@itemx @code{option}
Define an option that can be used in command line and configure file, such as `use_mpi'.
@itemx @code{depends_on}
Add a dependency package name, such as 'netcdf'.
@itemx @code{patch}
Add a patch, which will be applied when installing the package.
@itemx @code{binary}
Add a binary for a specific OS if the package has.
@itemx @code{install}
The main install rule block. Define how to install the package in this function.
@itemx @code{postfix}
After installation, add some fixes if necessary.
@end table

@bye
